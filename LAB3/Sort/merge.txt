static void merge(T* left, T* middle, T* right) {
    int n1 = middle - left + 1;
    int n2 = right - middle;

    T* leftArray = new T[n1];
    T* rightArray = new T[n2];

    for (int i = 0; i < n1; i++)
        leftArray[i] = *(left + i);
    for (int j = 0; j < n2; j++)
        rightArray[j] = *(middle + 1 + j);

    int i = 0, j = 0;
    T* k = left;

    while (i < n1 && j < n2) {
        if (leftArray[i] <= rightArray[j]) {
            *k = leftArray[i];
            i++;
        } else {
            *k = rightArray[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        *k = leftArray[i];
        i++;
        k++;
    }

    while (j < n2) {
        *k = rightArray[j];
        j++;
        k++;
    }

    delete[] leftArray;
    delete[] rightArray;

    Sorting::printArray(left, right );
}

static void mergeSort(T* start, T* end) {
    if (start < end) {
        T* middle = start + (end - start) / 2;

        mergeSort(start, middle);
        mergeSort(middle + 1, end);

        merge(start, middle, end);
    }
}