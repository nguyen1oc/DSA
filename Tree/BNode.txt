template <typename E>
BNode<E>* BSTdelete(BNode<E> * root, E val) {
    if (!root) return nullptr;
    if (val < root->element()) {
        root->setLeft(BSTdelete(root->left(), val));
    } else if (val > root->element()) {
        root->setRight(BSTdelete(root->right(), val));
    } else {
        if (root->left() == nullptr && root->right() == nullptr) {
            delete root;
            return nullptr;
        } else if (root->left() == nullptr) {
            BNode<E>* tmp = root->right();
            root->setRight(nullptr);
            delete root;
            return tmp;
        } else if (root->right() == nullptr) {
            BNode<E>* tmp = root->left();
            root->setLeft(nullptr);
            delete root;
            return tmp;
        } else {
            BNode<E>* successor = root->right();
            while (successor->left() != nullptr) {
                successor = successor->left();
            }
            root->setElement(successor->element());
            root->setRight(BSTdelete(root->right(), successor->element()));
        }
    }
    return root;
}
